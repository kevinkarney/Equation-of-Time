# -----------------------------------------------------------------------------------
# SOLAR ASTRONOMY
# -----------------------------------------------------------------------------------
# Python Code written by Kevin Karney, Summer 2023
# Should work on all releases of Python
# Free for anyone to use without any guarantees!
#
# Contains 2 Main Sub_Routines
# ----Sun(Year,Month,Day,Hour,Longitude,Latitude,Zone,DST)
#     provides EoT & Longitude Corrected EoT for any given date & time
#     optionally, it will print detailed calculation steps
#     NOTA BENE
#     by changing the return statement at the end of the routine,
#     it can return any of the other calculated values.
#     Much of the code in this routine print calculated values
#     of all the steps in the routine. These can be turned off.
# ----Year_Output(Year,Longitude,Zone)
#     provides EoT,Longitude Corrected EoT,Right Ascension,Declination, Altitude & Azimuth
#     as a tab-delimited output copy and pastable into a spreadsheet
# Also contains service routines
# ----Get_Julian_Day            (Year,Month,Day,Hour)    
# ----Get_Calendar_Date         (The_JD)
# ----Get_Date_from_Day_in_Year (Year,Day) # where 1st Jan = 1, etc
# ----EoT_Dec_MMSS              (The_EoT)
# ----Dec_Deg_DMS               (The_Degs)
# ----Dec_Hrs_HMS               (The_Hrs)

# ---------------------------------------------------------------------------------------
from math import degrees, radians, tan, sin, acos, cos, floor, atan2, sqrt, asin

# ---------------------------------------------------------------------------------------
# Input 
# ---------------------------------------------------------------------------------------
Place        = "Athens"
Longitude    = 23.71667 # Degrees : +ve East of Greenwich
Latitude     = 37.9666  # Degrees : +ve East of Greenwich
Zone         = 2        # Hrs     : +ve East of Greenwich
Year         = 2025
Month        = 2
Day          = 13
Hour         = 12
DST          = 0
Detail_Print = True     # Prints detailed calculation steps for day calculation
rounder      = 5        # rounds output to these number of decimals
Year_Calc    = False    # if True, provides values for a whole year

def Calculate():
    # -----------------------------------------------------
    # This is called from the last line of this code
    # -----------------------------------------------------
    if Year_Calc == True:
        Year_Output(Year,Longitude,Zone)
    else:    
        Results = Sun(Year,Month,Day,Hour,Longitude,Latitude,Zone,DST)
        print (EoT_Dec_MMSS(Results[0]))
        print (EoT_Dec_MMSS(Results[1]))
    
def Sun(Year,Month,Day,Hour,Longitude,Latitude,Zone,DST):
    # -----------------------------------------------------
    # This does the main astronomical calculations
    # It retuns the EoT and the Longitude Corrected EoT,
    # but these may be changed to any other parameter that has been calculated
    # -----------------------------------------------------
    UTC_hrs             = Hour - Zone - DST
    if UTC_hrs<0:  Day -=1
    if UTC_hrs>24: Day +=1
    UTC_hrs             = UTC_hrs % 24
    if (Month <= 2) :
        Year           -= 1
        Month          += 12	
    A                   = floor(Year/100)
    B                   = 2 - A + floor(A/4)
    JD = int(365.25*(Year + 4716)) + int(30.6001*(Month+1)) + Day + B - 1524.5
    #-------------------
    T                   = (JD - 2451545.)/36525
    D0                  = JD - 2451545.
    GMST_hrs            = (6.697374834 + 0.0657098242761  * D0 + 1.00273790935 * UTC_hrs + 0.000026 * T**2) % 24
    Mean_Longitude_hrs  = GMST_hrs + 12. - UTC_hrs
    Mean_Longitude_deg  = Mean_Longitude_hrs * 15
    #-------------------
    # These values obtained from the Astronmical Almanac cvols between 2000 and 2023
    Perihelion_deg      = 282.938     + 1.7     * T
    Eccentricity        = 0.016708617 - 0.00004 * T 
    Obliquity_deg       = 23.43929111 - 0.013   * T
    Obliquity_rad       = radians(Obliquity_deg)
    #-------------------
    Mean_Anomaly_deg    = Mean_Longitude_deg - Perihelion_deg
    Mean_Anomaly_rad    = radians(Mean_Anomaly_deg)
    E0 = Mean_Anomaly_rad
    E1 = E0 + (Mean_Anomaly_rad + Eccentricity*sin(E0)- E0)/(1 - Eccentricity*cos(E0))
    # p.s. second Newton Raphson iteration not really needed
    E2 = E1 + (Mean_Anomaly_rad + Eccentricity*sin(E1)- E1)/(1 - Eccentricity*cos(E1))
    Eccentric_Anomaly   = E2
    True_Anomaly_rad    = atan2(sqrt(1 - Eccentricity**2) * sin(Eccentric_Anomaly), (cos(Eccentric_Anomaly)- Eccentricity))
    True_Anomaly_deg    = degrees(True_Anomaly_rad)
    True_Long_deg       = True_Anomaly_deg + Perihelion_deg
    True_Long_rad       = radians(True_Long_deg)
    Eccent_Effect_deg   = True_Long_deg - Mean_Longitude_deg 
    Eccent_Effect_min   = 4 * Eccent_Effect_deg 
    #-------------------
    Right_Ascension_rad = atan2(cos(Obliquity_rad) * sin(True_Long_rad),cos(True_Long_rad)) % (2*pi)
    Right_Ascension_deg = (degrees(Right_Ascension_rad)) % 360.
    Right_Ascension_hrs = Right_Ascension_deg / 15.
    Declination_rad     = asin(sin(Obliquity_rad) * sin(True_Long_rad))
    Declination_deg     = degrees(Declination_rad)
    #-------------------
    EoT_deg             = Right_Ascension_deg - Mean_Longitude_deg
    if EoT_deg >  180.: EoT_deg = EoT_deg-360.
    if EoT_deg < -180.: EoT_deg = EoT_deg+360.
    EoT_min             = 4 * EoT_deg
    Obliq_Effect_min    = EoT_min - Eccent_Effect_min
    Long_Corr           = 4 * (Zone * 15 - Longitude)
    EoT_Corr_min        = EoT_min + Long_Corr
    
    Solar_Noon_hrs      = 12 + EoT_Corr_min/60
    Hour_Angle_hrs      = GMST_hrs + Longitude/15. - Right_Ascension_hrs
    Hour_Angle_rad      = radians(Hour_Angle_hrs * 15.)
    Latitude_rad        = radians(Latitude)
    Altitude_rad        = asin((sin(Latitude_rad) * sin(Declination_rad) + cos(Latitude_rad) * cos(Declination_rad) * cos(Hour_Angle_rad)))
    Altitude_deg        = degrees(Altitude_rad)
    a                   =-cos(Declination_rad) * cos(Latitude_rad) * sin(Hour_Angle_rad)
    b                   = sin(Declination_rad) - sin(Latitude_rad) * sin(Altitude_rad)
    Azimuth_rad         = atan2(a,b)
    Azimuth_deg         = degrees(Azimuth_rad)%360
    
    q_hrs               =(degrees(acos(-tan(Latitude_rad) * tan(Declination_rad)))) / 15
    SR_hrs              = Solar_Noon_hrs - q_hrs
    SS_hrs              = Solar_Noon_hrs + q_hrs
    r_deg               = degrees(acos(-sin(Declination_rad) / cos(Latitude_rad)))
    SRA_deg             = 180 - r_deg
    SSA_deg             = 180 + r_deg
    if Detail_Print:
        print ('---------------------')
        print ('Routine Sun - input')
        print ('---------------------')
        print ("Place                = ",Place)
        print ("Longitude            = ",Longitude)
        print ("Latitude             = ",Latitude)
        print ("Zone                 = ",Zone)
        print ("DST                  = ",DST)
        print ("Year                 = ",Year)
        if Month > 12:
            Year  +=1
            Month -= 12
        print ("Month                = ",Month)
        print ("Day                  = ",Day)
        print ("Civil Time           = ",Hour)
        print ("--------------")
        print ("Time Related Parameters")
        print ("--------------")
        print ("UTC_Hrs               = ",UTC_hrs)
        print ("A                     = ",int(A))
        print ("B                     = ",int(B))
        print ("JD                    = ",round(JD,rounder))
        print ("D0                    = ",round(D0,rounder))
        print ("T                     = ",round(T,rounder))
        print ("GMST_hrs              = ",round(GMST_hrs,rounder))
        print ("Mean_Longitude_hrs    = ",round(Mean_Longitude_hrs,rounder))
        print ("Mean_Longitude_deg    = ",round(Mean_Longitude_deg,rounder))
        print ("--------------")
        print ("Astronomical Fact")
        print ("--------------")
        print ("Perihelion_deg        = ",round(Perihelion_deg,rounder))
        print ("Eccentricity          = ",round(Eccentricity,rounder))
        print ("Obliquity_deg         = ",round(Obliquity_deg,rounder))
        print ("Obliquity_rad         = ",round(Obliquity_rad,rounder))
        print ("--------------")
        print ("Solving Kepler")
        print ("--------------")
        print ("Mean_Anomaly_deg      = ",round(Mean_Longitude_hrs,rounder))
        print ("Mean Anomaly rad      = ",round(Mean_Anomaly_rad,rounder))
        print ("Eccent Anomaly Iter 1 = ",round(E1,rounder))
        print ("Eccent Anomaly Iter 2 = ",round(E2,rounder))
        print ("True_Anomaly_rad      = ",round(True_Anomaly_rad,rounder))
        print ("True_Anomaly_deg      = ",round(True_Anomaly_deg,rounder))
        print ("True_Longitude_deg    = ",round(True_Long_deg,rounder))
        print ("True_Longitude_rad    = ",round(True_Long_rad,rounder))
        print ("Eccent_Efft_deg       = ",round(Eccent_Effect_deg,rounder))
        print ("Eccent_Efft_min       = ",round(Eccent_Effect_min,rounder))
        print ("                      = ",EoT_Dec_MMSS(Eccent_Effect_min))
        print ("--------------")
        print ("Right Ascension, Declination and EoT")
        print ("--------------")
        print ("Right_Ascension_rad   = ",round(Right_Ascension_rad,rounder))
        print ("Right_Ascension_deg   = ",round(Right_Ascension_deg,rounder))
        print ("                      = ",Dec_Deg_DMS(Right_Ascension_deg))
        print ("Right_Ascension_hrs   = ",round(Right_Ascension_hrs,rounder))
        print ("                      = ",Dec_Hrs_HMS(Right_Ascension_hrs))
        print ("Declination_rad       = ",round(Declination_rad,rounder))
        print ("Declination_deg       = ",round(Declination_deg,rounder))
        print ("                      = ",Dec_Deg_DMS(Declination_deg))
        print ("--------------")
        print ("EoT_deg               = ",round(EoT_deg,rounder))
        print ("EoT_min               = ",round(EoT_min,rounder))
        print ("                      = ",EoT_Dec_MMSS(EoT_min))
        print ("Obliq_Effect_min      = ",round(Obliq_Effect_min,rounder))
        print ("                      = ",EoT_Dec_MMSS(Obliq_Effect_min))
        print ('---------------------')
        print ("Long_Corr             = ",round(Long_Corr,rounder))
        print ("                      = ",EoT_Dec_MMSS(Long_Corr))
        print ("EoT_Corr_min          = ",round(EoT_Corr_min,rounder))
        print ("                      = ",EoT_Dec_MMSS(EoT_Corr_min))
        print ('---------------------')
        print ("Solar_Noon_hrs        = ",round(Solar_Noon_hrs,rounder))
        print ("                      = ",Dec_Hrs_HMS(Solar_Noon_hrs))
        print ("Hour_Angle_hrs        = ",round(Hour_Angle_hrs,rounder))
        print ("Hour_Angle_rad        = ",round(Hour_Angle_rad,rounder))
        print ("Latitude_rad          = ",round(Latitude_rad,rounder))
        print ("Altitude_rad          = ",round(Altitude_rad,rounder))
        print ("Altitude_deg          = ",round(Altitude_deg,rounder))
        print ("                      = ",Dec_Deg_DMS(Altitude_deg))
        print ("a                     = ",round(a,rounder))
        print ("b                     = ",round(b,rounder))
        print ("Azimuth_rad           = ",round(Azimuth_rad,rounder))
        print ("Azimuth_deg           = ",round(Azimuth_deg,rounder))
        print ("                      = ",Dec_Deg_DMS(Azimuth_deg))
        print ("q_hrs                 = ",round(q_hrs,rounder))
        print ("SR_hrs                = ",round(SR_hrs,rounder))
        print ("                      = ",Dec_Hrs_HMS(SR_hrs))
        print ("SS_hrs                = ",round(SS_hrs,rounder))
        print ("                      = ",Dec_Hrs_HMS(SS_hrs))
        print ("r_deg                 = ",round(r_deg,rounder))
        print ("SRA_deg               = ",round(SRA_deg,rounder))
        print ("SSA_deg               = ",round(SSA_deg,rounder))
        
        print ()
    return EoT_min,EoT_Corr_min

def Year_Output(Year,Longitude,Zone):
    # ---------------------------------------------------------------
    # Routine to Calculate... 
    #      Longitude Corrected Equation of Time & 
    #      Solar Declination
    # This follows the routine to be found in Chapter 3, Components
    # ---------------------------------------------------------------
    Detail_Print = False
    JD_1_Jan     = Get_Julian_Day(Year,1,1,Hour)
    Days_in_Year = 365 if Year%4 != 0 else 366
    
    print ("Date " + "\t" + "EoT "+ "\t" + "Long Corr EoT "+ "\t" + "RA "+ "\t" + "Decl " +  "\t" + "Alt "+  "\t" + "Az "  + "\r" )

    for i in range(Days_in_Year): 
        JD                  = JD_1_Jan + i
        UTC_hrs             = Hour - Zone
        D0                  = JD - 2451545.
        T                   = D0/36525
        GMST_hrs            = (6.697374834 + 0.0657098242761  * D0 + 1.00273790935 * UTC_hrs + 0.000026 * T**2) % 24
        Mean_Longitude_hrs  = GMST_hrs + 12. - UTC_hrs
        Mean_Longitude_deg  = Mean_Longitude_hrs * 15
    
        Perihelion_deg      = 282.938     + 1.7     * T
        Eccentricity        = 0.016708617 - 0.00004 * T 
        Obliquity_deg       = 23.43929111 - 0.013   * T
        Obliquity_rad       = radians(Obliquity_deg)
    
        Mean_Anomaly_deg    = Mean_Longitude_deg - Perihelion_deg
        Mean_Anomaly_rad    = radians(Mean_Anomaly_deg)
        E0 = Mean_Anomaly_rad
        E1 = E0 + (Mean_Anomaly_rad + Eccentricity*sin(E0)- E0)/(1 - Eccentricity*cos(E0))
        E2 = E1 + (Mean_Anomaly_rad + Eccentricity*sin(E1)- E1)/(1 - Eccentricity*cos(E1))
        Eccentric_Anomaly   = E2
        True_Anomaly_rad    = atan2(sqrt(1 - Eccentricity**2) * sin(Eccentric_Anomaly), (cos(Eccentric_Anomaly)- Eccentricity))
        True_Anomaly_deg    = degrees(True_Anomaly_rad)
    
        True_Long_deg       = True_Anomaly_deg + Perihelion_deg
        True_Long_rad       = radians(True_Long_deg)
    
        Right_Ascension_rad = atan2(cos(Obliquity_rad) * sin(True_Long_rad),cos(True_Long_rad)) % (2*pi)
        Right_Ascension_deg = (degrees(Right_Ascension_rad)) % 360.
        Right_Ascension_hrs = Right_Ascension_deg / 15.
        Declination_rad     = asin(sin(Obliquity_rad) * sin(True_Long_rad))
        Declination_deg     = degrees(Declination_rad)
    
        EoT_deg             = Right_Ascension_deg - Mean_Longitude_deg
        if EoT_deg >  180.: EoT_deg = EoT_deg-360.
        if EoT_deg < -180.: EoT_deg = EoT_deg+360.
        EoT_min             = 4 * EoT_deg
        Long_Corr           = 4 * (Zone * 15 - Longitude)
        EoT_Corr_min        = EoT_min + Long_Corr
        Hour_Angle_hrs      = GMST_hrs + Longitude/15. - Right_Ascension_hrs
        Hour_Angle_rad      = radians(Hour_Angle_hrs * 15.)
        Latitude_rad        = radians(Latitude)
        Altitude_rad        = asin((sin(Latitude_rad) * sin(Declination_rad) + cos(Latitude_rad) * cos(Declination_rad) * cos(Hour_Angle_rad)))
        Altitude_deg        = degrees(Altitude_rad)
        a                   =-cos(Declination_rad) * cos(Latitude_rad) * sin(Hour_Angle_rad)
        b                   = sin(Declination_rad) - sin(Latitude_rad) * sin(Altitude_rad)
        Azimuth_rad         = atan2(a,b)
        Azimuth_deg         = degrees(Azimuth_rad)%360

        print (Get_Calendar_Date(JD) + "\t " + str(round(EoT_min,rounder))+ "\t" + str(round(EoT_Corr_min,rounder))+ "\t " + str(round(Right_Ascension_hrs,rounder))+ "\t " + str(round(Declination_deg,rounder))+ "\t " + str(round(Altitude_deg,rounder))+ "\t " + str(round(Azimuth_deg,rounder))  + "\r" )

def Get_Julian_Day(Year, Month, Day, Hour) :
    #===========================================
    # ROUTINE TO GET JULIAN DAY FROM DATE & TIME
    #Reference: Astronomical Algorithms 2nd Edition 1998 by Jean Meeus - Page 60-61
	if Month <= 2 :
		YYear					= Year - 1
		MMonth					= Month + 12
	else :
		YYear					= Year
		MMonth					= Month
	a							= int(YYear / 100)
	if YYear > 1582 :
		Switcher				= 1
	else :
		if YYear < 1582 :
			Switcher			    = 0
		else :
			if MMonth > 10 :
				Switcher			= 1
			else :
				if MMonth < 10 :
					Switcher		= 0
				else :
					if Day >= 15 :
						Switcher    = 1
					else :
						Switcher    = 0
	if Switcher == 0 :
		b						    = 0
	else :
		b						    = 2 - a + int(a / 4)
	c							    = int(365.25 * YYear) ;
	d							     = int(30.6001 * (MMonth + 1)) ;
	return b + c + d + Day + 1720994.5 + Hour/24.

def Get_Calendar_Date(The_JD) :
    #======================================================
    # ROUTINE TO GET CALENDAR DATE AND TIME FROM JULIAN DAY
	#Reference: Practical Astronomy with your Calculator 3rd Edn : Duffet Smith - Page 8
	Month_List = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]
	JDD                = The_JD + .5
	III                = int(JDD)
	FFF                = JDD - III
	if III > 2299160 :
		AA             = int((III - 1867216.25) / 36524.25)
		BB             = III + 1 + AA - int(AA / 4)
	else :
		BB             = III
	CC                 = BB + 1524
	DD                 = int((CC - 122.1) / 365.25)
	EE                 = int(365.25 * DD)
	GG                 = int((CC - EE) / 30.6001)
	Day_inc_Frac       = CC - EE + FFF - int(30.6001 * GG)
	Dayo               = int(Day_inc_Frac)
	Hour               = 24 * (Day_inc_Frac - Dayo)
	Houro              = int(Hour)
	Minute             = 60. * (Hour - Houro)
	Minuteo            = int(Minute)
	Second             = 60. * (Minute-Minuteo)                   
	if GG < 13.5 :
		Montho         = GG - 1
	else :
		Montho         = GG - 13
	if Montho > 2.5 :
		Yearo          = DD - 4716
	else :
		Yearo          = DD - 4715
	return str(Dayo) + '-' + Month_List[Montho-1] + '-' + str(Yearo)

def Get_Date_from_Day_in_Year(Year,Day):
    # ---------------------------------------------------------------
    # Utility to provide the civil date from Day Number 
    # Input 'Day' is day in year starting with 1 on 1st Jan
    # Output is... 
    #           Day in Month e.g 6th, 13th etc
    #           Month Index e.g 2 for Frbruary
    #           Text Date e.g 27-Apr
# -----------------------------------------------------------------------------------
# SOLAR ASTRONOMY
# -----------------------------------------------------------------------------------
# Python Code written by Kevin Karney, Summer 2023
# Should work on all releases of Python
# Free for anyone to use without any guarantees!
#
# Contains 2 Main Sub_Routines
# ----Sun(Year,Month,Day,Hour,Longitude,Latitude,Zone,DST)
#     provides EoT & Longitude Corrected EoT for any given date & time
#     optionally, it will print detailed calculation steps
#     NOTA BENE
#     by changing the return statement at the end of the routine,
#     it can return any of the other calculated values.
#     Much of the code in this routine print calculated values
#     of all the steps in the routine. These can be turned off.
# ----Year_Output(Year,Longitude,Zone)
#     provides EoT,Longitude Corrected EoT,Right Ascension,Declination, Altitude & Azimuth
#     as a tab-delimited output copy and pastable into a spreadsheet
# Also contains service routines
# ----Get_Julian_Day            (Year,Month,Day,Hour)    
# ----Get_Calendar_Date         (The_JD)
# ----Get_Date_from_Day_in_Year (Year,Day) # where 1st Jan = 1, etc
# ----EoT_Dec_MMSS              (The_EoT)
# ----Dec_Deg_DMS               (The_Degs)
# ----Dec_Hrs_HMS               (The_Hrs)

# ---------------------------------------------------------------------------------------
from math import degrees, radians, tan, sin, acos, cos, floor, atan2, sqrt, asin

# ---------------------------------------------------------------------------------------
# Input 
# ---------------------------------------------------------------------------------------
Place        = "Athens"
Longitude    = 23.71667 # Degrees : +ve East of Greenwich
Latitude     = 37.9666  # Degrees : +ve East of Greenwich
Zone         = 2        # Hrs     : +ve East of Greenwich
Year         = 2025
Month        = 2
Day          = 13
Hour         = 12
DST          = 0
Detail_Print = True     # Prints detailed calculation steps for day calculation
rounder      = 5        # rounds output to these number of decimals
Year_Calc    = False    # if True, provides values for a whole year

def Calculate():
    # -----------------------------------------------------
    # This is called from the last line of this code
    # -----------------------------------------------------
    if Year_Calc == True:
        Year_Output(Year,Longitude,Zone)
    else:    
        Results = Sun(Year,Month,Day,Hour,Longitude,Latitude,Zone,DST)
        print (EoT_Dec_MMSS(Results[0]))
        print (EoT_Dec_MMSS(Results[1]))
    
def Sun(Year,Month,Day,Hour,Longitude,Latitude,Zone,DST):
    # -----------------------------------------------------
    # This does the main astronomical calculations
    # It retuns the EoT and the Longitude Corrected EoT,
    # but these may be changed to any other parameter that has been calculated
    # -----------------------------------------------------
    UTC_hrs             = Hour - Zone - DST
    if UTC_hrs<0:  Day -=1
    if UTC_hrs>24: Day +=1
    UTC_hrs             = UTC_hrs % 24
    if (Month <= 2) :
        Year           -= 1
        Month          += 12	
    A                   = floor(Year/100)
    B                   = 2 - A + floor(A/4)
    JD = int(365.25*(Year + 4716)) + int(30.6001*(Month+1)) + Day + B - 1524.5
    #-------------------
    T                   = (JD - 2451545.)/36525
    D0                  = JD - 2451545.
    GMST_hrs            = (6.697374834 + 0.0657098242761  * D0 + 1.00273790935 * UTC_hrs + 0.000026 * T**2) % 24
    Mean_Longitude_hrs  = GMST_hrs + 12. - UTC_hrs
    Mean_Longitude_deg  = Mean_Longitude_hrs * 15
    #-------------------
    # These values obtained from the Astronmical Almanac cvols between 2000 and 2023
    Perihelion_deg      = 282.938     + 1.7     * T
    Eccentricity        = 0.016708617 - 0.00004 * T 
    Obliquity_deg       = 23.43929111 - 0.013   * T
    Obliquity_rad       = radians(Obliquity_deg)
    #-------------------
    Mean_Anomaly_deg    = Mean_Longitude_deg - Perihelion_deg
    Mean_Anomaly_rad    = radians(Mean_Anomaly_deg)
    E0 = Mean_Anomaly_rad
    E1 = E0 + (Mean_Anomaly_rad + Eccentricity*sin(E0)- E0)/(1 - Eccentricity*cos(E0))
    # p.s. second Newton Raphson iteration not really needed
    E2 = E1 + (Mean_Anomaly_rad + Eccentricity*sin(E1)- E1)/(1 - Eccentricity*cos(E1))
    Eccentric_Anomaly   = E2
    True_Anomaly_rad    = atan2(sqrt(1 - Eccentricity**2) * sin(Eccentric_Anomaly), (cos(Eccentric_Anomaly)- Eccentricity))
    True_Anomaly_deg    = degrees(True_Anomaly_rad)
    True_Long_deg       = True_Anomaly_deg + Perihelion_deg
    True_Long_rad       = radians(True_Long_deg)
    Eccent_Effect_deg   = True_Long_deg - Mean_Longitude_deg 
    Eccent_Effect_min   = 4 * Eccent_Effect_deg 
    #-------------------
    Right_Ascension_rad = atan2(cos(Obliquity_rad) * sin(True_Long_rad),cos(True_Long_rad)) % (2*pi)
    Right_Ascension_deg = (degrees(Right_Ascension_rad)) % 360.
    Right_Ascension_hrs = Right_Ascension_deg / 15.
    Declination_rad     = asin(sin(Obliquity_rad) * sin(True_Long_rad))
    Declination_deg     = degrees(Declination_rad)
    #-------------------
    EoT_deg             = Right_Ascension_deg - Mean_Longitude_deg
    if EoT_deg >  180.: EoT_deg = EoT_deg-360.
    if EoT_deg < -180.: EoT_deg = EoT_deg+360.
    EoT_min             = 4 * EoT_deg
    Obliq_Effect_min    = EoT_min - Eccent_Effect_min
    Long_Corr           = 4 * (Zone * 15 - Longitude)
    EoT_Corr_min        = EoT_min + Long_Corr
    #-------------------
    Solar_Noon_hrs      = 12 + EoT_Corr_min/60
    Hour_Angle_hrs      = GMST_hrs + Longitude/15. - Right_Ascension_hrs
    Hour_Angle_rad      = radians(Hour_Angle_hrs * 15.)
    Latitude_rad        = radians(Latitude)
    Altitude_rad        = asin((sin(Latitude_rad) * sin(Declination_rad) + cos(Latitude_rad) * cos(Declination_rad) * cos(Hour_Angle_rad)))
    Altitude_deg        = degrees(Altitude_rad)
    a                   =-cos(Declination_rad) * cos(Latitude_rad) * sin(Hour_Angle_rad)
    b                   = sin(Declination_rad) - sin(Latitude_rad) * sin(Altitude_rad)
    Azimuth_rad         = atan2(a,b)
    Azimuth_deg         = degrees(Azimuth_rad)%360
    #-------------------
    q_hrs               =(degrees(acos(-tan(Latitude_rad) * tan(Declination_rad)))) / 15
    SR_hrs              = Solar_Noon_hrs - q_hrs
    SS_hrs              = Solar_Noon_hrs + q_hrs
    r_deg               = degrees(acos(-sin(Declination_rad) / cos(Latitude_rad)))
    SRA_deg             = 180 - r_deg
    SSA_deg             = 180 + r_deg
    
    if Detail_Print:
        print ('---------------------')
        print ('Routine Sun - input')
        print ('---------------------')
        print ("Place                = ",Place)
        print ("Longitude            = ",Longitude)
        print ("Latitude             = ",Latitude)
        print ("Zone                 = ",Zone)
        print ("DST                  = ",DST)
        print ("Year                 = ",Year)
        if Month > 12:
            Year  +=1
            Month -= 12
        print ("Month                = ",Month)
        print ("Day                  = ",Day)
        print ("Civil Time           = ",Hour)
        print ("--------------")
        print ("Time Related Parameters")
        print ("--------------")
        print ("UTC_Hrs               = ",UTC_hrs)
        print ("A                     = ",int(A))
        print ("B                     = ",int(B))
        print ("JD                    = ",round(JD,rounder))
        print ("D0                    = ",round(D0,rounder))
        print ("T                     = ",round(T,rounder))
        print ("GMST_hrs              = ",round(GMST_hrs,rounder))
        print ("Mean_Longitude_hrs    = ",round(Mean_Longitude_hrs,rounder))
        print ("Mean_Longitude_deg    = ",round(Mean_Longitude_deg,rounder))
        print ("--------------")
        print ("Astronomical Fact")
        print ("--------------")
        print ("Perihelion_deg        = ",round(Perihelion_deg,rounder))
        print ("Eccentricity          = ",round(Eccentricity,rounder))
        print ("Obliquity_deg         = ",round(Obliquity_deg,rounder))
        print ("Obliquity_rad         = ",round(Obliquity_rad,rounder))
        print ("--------------")
        print ("Solving Kepler")
        print ("--------------")
        print ("Mean_Anomaly_deg      = ",round(Mean_Longitude_hrs,rounder))
        print ("Mean Anomaly rad      = ",round(Mean_Anomaly_rad,rounder))
        print ("Eccent Anomaly Iter 1 = ",round(E1,rounder))
        print ("Eccent Anomaly Iter 2 = ",round(E2,rounder))
        print ("True_Anomaly_rad      = ",round(True_Anomaly_rad,rounder))
        print ("True_Anomaly_deg      = ",round(True_Anomaly_deg,rounder))
        print ("True_Longitude_deg    = ",round(True_Long_deg,rounder))
        print ("True_Longitude_rad    = ",round(True_Long_rad,rounder))
        print ("Eccent_Efft_deg       = ",round(Eccent_Effect_deg,rounder))
        print ("Eccent_Efft_min       = ",round(Eccent_Effect_min,rounder))
        print ("                      = ",EoT_Dec_MMSS(Eccent_Effect_min))
        print ("--------------")
        print ("Right Ascension, Declination and EoT")
        print ("--------------")
        print ("Right_Ascension_rad   = ",round(Right_Ascension_rad,rounder))
        print ("Right_Ascension_deg   = ",round(Right_Ascension_deg,rounder))
        print ("                      = ",Dec_Deg_DMS(Right_Ascension_deg))
        print ("Right_Ascension_hrs   = ",round(Right_Ascension_hrs,rounder))
        print ("                      = ",Dec_Hrs_HMS(Right_Ascension_hrs))
        print ("Declination_rad       = ",round(Declination_rad,rounder))
        print ("Declination_deg       = ",round(Declination_deg,rounder))
        print ("                      = ",Dec_Deg_DMS(Declination_deg))
        print ("--------------")
        print ("EoT_deg               = ",round(EoT_deg,rounder))
        print ("EoT_min               = ",round(EoT_min,rounder))
        print ("                      = ",EoT_Dec_MMSS(EoT_min))
        print ("Obliq_Effect_min      = ",round(Obliq_Effect_min,rounder))
        print ("                      = ",EoT_Dec_MMSS(Obliq_Effect_min))
        print ('---------------------')
        print ("Long_Corr             = ",round(Long_Corr,rounder))
        print ("                      = ",EoT_Dec_MMSS(Long_Corr))
        print ("EoT_Corr_min          = ",round(EoT_Corr_min,rounder))
        print ("                      = ",EoT_Dec_MMSS(EoT_Corr_min))
        print ('---------------------')
        print ("Solar_Noon_hrs        = ",round(Solar_Noon_hrs,rounder))
        print ("                      = ",Dec_Hrs_HMS(Solar_Noon_hrs))
        print ("Hour_Angle_hrs        = ",round(Hour_Angle_hrs,rounder))
        print ("Hour_Angle_rad        = ",round(Hour_Angle_rad,rounder))
        print ("Latitude_rad          = ",round(Latitude_rad,rounder))
        print ("Altitude_rad          = ",round(Altitude_rad,rounder))
        print ("Altitude_deg          = ",round(Altitude_deg,rounder))
        print ("                      = ",Dec_Deg_DMS(Altitude_deg))
        print ("a                     = ",round(a,rounder))
        print ("b                     = ",round(b,rounder))
        print ("Azimuth_rad           = ",round(Azimuth_rad,rounder))
        print ("Azimuth_deg           = ",round(Azimuth_deg,rounder))
        print ("                      = ",Dec_Deg_DMS(Azimuth_deg))
        print ("q_hrs                 = ",round(q_hrs,rounder))
        print ("SR_hrs                = ",round(SR_hrs,rounder))
        print ("                      = ",Dec_Hrs_HMS(SR_hrs))
        print ("SS_hrs                = ",round(SS_hrs,rounder))
        print ("                      = ",Dec_Hrs_HMS(SS_hrs))
        print ("r_deg                 = ",round(r_deg,rounder))
        print ("SRA_deg               = ",round(SRA_deg,rounder))
        print ("SSA_deg               = ",round(SSA_deg,rounder))
        
        print ()
    return EoT_min,EoT_Corr_min

def Year_Output(Year,Longitude,Zone):
    # ---------------------------------------------------------------
    # Routine to Calculate... 
    #      Longitude Corrected Equation of Time & 
    #      Solar Declination
    # This follows the routine to be found in Chapter 3, Components
    # ---------------------------------------------------------------
    Detail_Print = False
    JD_1_Jan     = Get_Julian_Day(Year,1,1,Hour)
    Days_in_Year = 365 if Year%4 != 0 else 366
    
    print ("Date " + "\t" + "EoT "+ "\t" + "Long Corr EoT "+ "\t" + "RA "+ "\t" + "Decl " +  "\t" + "Alt "+  "\t" + "Az "  + "\r" )

    for i in range(Days_in_Year): 
        JD                  = JD_1_Jan + i
        UTC_hrs             = Hour - Zone
        D0                  = JD - 2451545.
        T                   = D0/36525
        GMST_hrs            = (6.697374834 + 0.0657098242761  * D0 + 1.00273790935 * UTC_hrs + 0.000026 * T**2) % 24
        Mean_Longitude_hrs  = GMST_hrs + 12. - UTC_hrs
        Mean_Longitude_deg  = Mean_Longitude_hrs * 15
    
        Perihelion_deg      = 282.938     + 1.7     * T
        Eccentricity        = 0.016708617 - 0.00004 * T 
        Obliquity_deg       = 23.43929111 - 0.013   * T
        Obliquity_rad       = radians(Obliquity_deg)
    
        Mean_Anomaly_deg    = Mean_Longitude_deg - Perihelion_deg
        Mean_Anomaly_rad    = radians(Mean_Anomaly_deg)
        E0 = Mean_Anomaly_rad
        E1 = E0 + (Mean_Anomaly_rad + Eccentricity*sin(E0)- E0)/(1 - Eccentricity*cos(E0))
        E2 = E1 + (Mean_Anomaly_rad + Eccentricity*sin(E1)- E1)/(1 - Eccentricity*cos(E1))
        Eccentric_Anomaly   = E2
        True_Anomaly_rad    = atan2(sqrt(1 - Eccentricity**2) * sin(Eccentric_Anomaly), (cos(Eccentric_Anomaly)- Eccentricity))
        True_Anomaly_deg    = degrees(True_Anomaly_rad)
    
        True_Long_deg       = True_Anomaly_deg + Perihelion_deg
        True_Long_rad       = radians(True_Long_deg)
    
        Right_Ascension_rad = atan2(cos(Obliquity_rad) * sin(True_Long_rad),cos(True_Long_rad)) % (2*pi)
        Right_Ascension_deg = (degrees(Right_Ascension_rad)) % 360.
        Right_Ascension_hrs = Right_Ascension_deg / 15.
        Declination_rad     = asin(sin(Obliquity_rad) * sin(True_Long_rad))
        Declination_deg     = degrees(Declination_rad)
    
        EoT_deg             = Right_Ascension_deg - Mean_Longitude_deg
        if EoT_deg >  180.: EoT_deg = EoT_deg-360.
        if EoT_deg < -180.: EoT_deg = EoT_deg+360.
        EoT_min             = 4 * EoT_deg
        Long_Corr           = 4 * (Zone * 15 - Longitude)
        EoT_Corr_min        = EoT_min + Long_Corr
        Hour_Angle_hrs      = GMST_hrs + Longitude/15. - Right_Ascension_hrs
        Hour_Angle_rad      = radians(Hour_Angle_hrs * 15.)
        Latitude_rad        = radians(Latitude)
        Altitude_rad        = asin((sin(Latitude_rad) * sin(Declination_rad) + cos(Latitude_rad) * cos(Declination_rad) * cos(Hour_Angle_rad)))
        Altitude_deg        = degrees(Altitude_rad)
        a                   =-cos(Declination_rad) * cos(Latitude_rad) * sin(Hour_Angle_rad)
        b                   = sin(Declination_rad) - sin(Latitude_rad) * sin(Altitude_rad)
        Azimuth_rad         = atan2(a,b)
        Azimuth_deg         = degrees(Azimuth_rad)%360

        print (Get_Calendar_Date(JD) + "\t " + str(round(EoT_min,rounder))+ "\t" + str(round(EoT_Corr_min,rounder))+ "\t " + str(round(Right_Ascension_hrs,rounder))+ "\t " + str(round(Declination_deg,rounder))+ "\t " + str(round(Altitude_deg,rounder))+ "\t " + str(round(Azimuth_deg,rounder))  + "\r" )

def Get_Julian_Day(Year, Month, Day, Hour) :
    # -----------------------------------------------------
    # Routine to calculate Julian Day fron Calendard Date & Hour
    # Reference: Astronomical Algorithms 2nd Edition 1998 by Jean Meeus - Page 60-61
	if Month <= 2 :
		YYear					= Year - 1
		MMonth					= Month + 12
	else :
		YYear					= Year
		MMonth					= Month
	a							= int(YYear / 100)
	if YYear > 1582 :
		Switcher				= 1
	else :
		if YYear < 1582 :
			Switcher			    = 0
		else :
			if MMonth > 10 :
				Switcher			= 1
			else :
				if MMonth < 10 :
					Switcher		= 0
				else :
					if Day >= 15 :
						Switcher    = 1
					else :
						Switcher    = 0
	if Switcher == 0 :
		b						    = 0
	else :
		b						    = 2 - a + int(a / 4)
	c							    = int(365.25 * YYear) ;
	d							     = int(30.6001 * (MMonth + 1)) ;
	return b + c + d + Day + 1720994.5 + Hour/24.

def Get_Calendar_Date(The_JD) :
    # -----------------------------------------------------
    # Routine to calculate Calendar Date & Hour from Julian Day
    # Reference: Practical Astronomy with your Calculator 3rd Edn : Duffet Smith - Page 8
	Month_List = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]
	JDD                = The_JD + .5
	III                = int(JDD)
	FFF                = JDD - III
	if III > 2299160 :
		AA             = int((III - 1867216.25) / 36524.25)
		BB             = III + 1 + AA - int(AA / 4)
	else :
		BB             = III
	CC                 = BB + 1524
	DD                 = int((CC - 122.1) / 365.25)
	EE                 = int(365.25 * DD)
	GG                 = int((CC - EE) / 30.6001)
	Day_inc_Frac       = CC - EE + FFF - int(30.6001 * GG)
	Dayo               = int(Day_inc_Frac)
	Hour               = 24 * (Day_inc_Frac - Dayo)
	Houro              = int(Hour)
	Minute             = 60. * (Hour - Houro)
	Minuteo            = int(Minute)
	Second             = 60. * (Minute-Minuteo)                   
	if GG < 13.5 :
		Montho         = GG - 1
	else :
		Montho         = GG - 13
	if Montho > 2.5 :
		Yearo          = DD - 4716
	else :
		Yearo          = DD - 4715
	return str(Dayo) + '-' + Month_List[Montho-1] + '-' + str(Yearo)

def Get_Date_from_Day_in_Year(Year,Day):
    # ---------------------------------------------------------------
    # Utility to provide the civil date from Day Number 
    # Input 'Day' is day in year starting with 1 on 1st Jan
    # Output is... 
    #           Day in Month e.g 6th, 13th etc
    #           Month Index e.g 2 for Frbruary
    #           Text Date e.g 27-Apr
    # ---------------------------------------------------------------
    Leap = True if Year % 4 == 0 else False
    if not Leap:
        First_of_Month   = [0,1,32,60,91,121,152,182,213,244,274,305,335]
        end = 365
    else:
        First_of_Month   = [0,1,32,61,92,122,153,183,214,245,275,306,336]
        end = 366
    Month_Names          = [" ","Jan","Feb","Mar","Apr","May","Jun",
                                "Jul","Aug","Sep","Oct","Nov","Dec"]
    Month_Index          = 0
    Last_Month_Index     = 0
    for Day_in_Year in range(1,end+1):
        if (Day_in_Year in First_of_Month):
            Month_Index += 1
            Last_Month_Index = Day_in_Year 
        if Day_in_Year == Day:
            Day_in_Month = Day_in_Year - Last_Month_Index + 1
            return Day_in_Month, Month_Index, str(Day_in_Month) + "-" + Month_Names[Month_Index]

def EoT_Dec_MMSS(The_EoT):
    # -----------------------------------------------------
    # Routine to convert Decimal Minutes to Minutes & Seconds
	Sign = "+"
	if The_EoT < 0 : Sign = "-"
	M0   = abs(The_EoT)
	M1   = int(M0)
	S0   = 60 * (M0 - M1)
	return Sign + '%02.0f' % M1 + ":" + '%02.1f' % S0 + " mm:ss"

def Dec_Deg_DMS(The_Degs) :
    # -----------------------------------------------------
    # Routine to convert Decimal Degrees to Degrees,Minutes & Seconds
    D0 = abs(The_Degs)
    Sign = "+"
    if (The_Degs < 0) : Sign = "-"
    D1 = int(D0)
    M0 = 60. * (D0 - D1)
    M1 = int (M0)
    S0 = 60. * (M0 - M1)
    return Sign + '%.02d' % D1 + u"° " +'%.02d' % M1 + u"’ " + '%2.1f' % S0 + u"”"

def Dec_Hrs_HMS(The_Hrs) :
    # -----------------------------------------------------
    # Routine to convert Decimal Hours to Hours,Minutes & Seconds
    D0 = abs(The_Hrs)
    Sign = "+"
    if (The_Hrs < 0) : Sign = "-"
    D1 = int(D0)
    M0 = 60. * (D0 - D1)
    M1 = int (M0)
    S0 = 60. * (M0 - M1)
    return Sign + '%.02d' % D1 + u":" +'%.02d' % M1 + u":" + '%2.1f' % S0 + u" hh:mm:ss"

Calculate()

print ("Done")