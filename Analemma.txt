# -----------------------------------------------------------------------------------
# ANALEMMA
# -----------------------------------------------------------------------------------
# Python Code written by Kevin Karney, Summer 2023
# Should work on all releases of Python
# Free for anyone to use without any guarantees!
# Outputs a tab-delimited text file with....
#     Year,Month,Day,Hour,Minute,x & y coordinates of the nodus shadow
# with appropiate Headers for each curve
# nota bene - output files can be very lengthy!
#
# The x-y coordinate system used has origin the centre of the defined rectangular dial plate
# The x axis is horizontal : +ve to right
# the y-axis is the line of greates slope : +ve upwards
# ---------------------------------------------------------------------------------------
# Subroutines called :
# Calculate               - sets up output and calls the two main calculating routines
#                           it is called from the end of code
# Analamma                - set up to all the requested analemmas
# Declination_Lines       - set up to all the requested declination lines
# Shadow                  - THIS THE ESSENTIAL GNONOMIC CALCULATOR
#                           it is called by the previous two subroutines
#                           it calls the following two subroutines
#                           it outputs the x,y coordinates of the nodus shadow
# EoT_Decl                - calculates Longitude Corrected Equation of Time 
#                           &  Solar Declination
# Date_Parameters         - gets day & month numbers and text reprentation for day-in-year index
# Various Output routines - do the appropriate output formatting
# ---------------------------------------------------------------------------------------
from math import degrees, radians, tan, sin, acos, cos, floor, atan2, sqrt, asin

# Note Output File Folder & File will be specific to user's operating system
# You may have to set sepecific permissions to wtite to file
Filename = '/Users/kevinkarney/Desktop/Annalemma.txt'

# =================================================================================================================================
# Input Location
# =================================================================================================================================
Place                 = "Athens"
Time_Zone             = 2
Longitude             = 23.71667 # Degrees : Positive East of Greenwich
Latitude              = 37.96667 # Degrees : Positive in Northern Hempisphere

# =================================================================================================================================
# Input Application Requirements
# =================================================================================================================================
Year                  = 2025     # Year for which EoT and Declination are calculated
Hour_Start            = 11 
Hour_End              = 14       #   e.g. will draw analemmas from 11 a.m. to 2 p.m.
Analemma_Minute_Inc   = 15       #   e.g 15 if you want analemmas every 15 minutes
Declination_Increment = 5        #   e.g 5 if you want declination points every 5 minutes
Want_Declination_Lines = True
Which_Analemma        = 0        # 0 = Full Analemma : 
                                 # 1 = Daylight Increasing (Winter and Spring) 
                                 # 2 = Daylight Shortening (Summer and Autumn)
Mean_or_Solar         = True     # if False, will produce results for traditional straight-line solar sundial

# =================================================================================================================================
# Input basic gnomonic parameters
# Reference Meeus Astronomical Algorithms Chapter 58
# Sizes are unitless: Output the same as input
# =================================================================================================================================
Dial_Plate_Width  = 16 
Dial_Plate_Height = 16
Nodus_Height      = 5  
Nodus_x           = 4   # Shift Nodus away from physical centre of the Dial Plate in x-direction
Nodus_y           = 4   # ditto in y-direction (+ve Up)
Zenithal_Dist     = 60  # Degrees :  0 = Horizontal, 90 = Vertical
Gnomonic_Decl     = 50  # Degrees :  0 = due South,  90 = due West, 
                        #          180 = due North, 270 = due East
L                 = radians(Latitude)
D                 = radians(Gnomonic_Decl)
Z                 = radians(Zenithal_Dist)
P                 = sin(L) * cos(Z) - cos(L) * sin(Z)  * cos(D)
# X0 & Y0 are the coodinates from the dial Plate centre
# of the foot of a polar stylus passing through the nodus
# i.e. the centre of the traditional dial
X0                = Nodus_Height * cos(L) * sin(D) / P
Y0                = Nodus_Height * (sin(L) * sin(Z) + cos(L) * cos(Z) * cos(D)) / P

# =================================================================================================================================
# Input Dates of Solstices, Equinoxs, etc
# =================================================================================================================================
Spring_Equinox    =  79 # where 1 for 1st Jan
Summer_Solstice   = 172
Autumn_Equinox    = 265
Winter_Solstice   = 355
Equinoxs          = (Spring_Equinox , Autumn_Equinox )
Solstices         = (Summer_Solstice, Winter_Solstice)
# following 2 items must include at lesat 2 items : use (999,999) if none required
Declination_Days  = (1,10,20,999) # e.g. lines on 1st, 10th, 20th of the month
Special_Days      = (40,999)   # use for birthdays, etc
Days_in_Year      = 366 if Year % 4 == 0 else 365

# =================================================================================================================================
# Do the Calculations
# =================================================================================================================================
def Calculate():
    File = open(Filename,'w')
    Print_Super_Header(File)
    Analemmas         (File)
    Declination_Lines (File)
    File.close()

def Analemmas(File):
    # ----------------------------------------------------------
    # Draw the Analemmas
    # Loop over the Hours requested in the day, then each day in the year 
    # It calls routine 'Shadow' (& various output formatting rountines)
    # ---------------------------------------------------------- 
    Print_Analemma_Header(Hour_Start,File)  

    Start_Minute = Hour_Start * 60
    End_Minute   = Hour_End   * 60
    for Minute in range(Start_Minute,End_Minute+1,Analemma_Minute_Inc) :
        Hour           = Minute / 60.
        Minute_in_Hour = Minute % 60
        Time_Text = str(int(Hour)) + ":" + ("0" if Minute_in_Hour < 10 else "")+ str(Minute_in_Hour) + " hh:mm"
        Print_Analemma_Sub_Header(Time_Text,File)
        
        for Day in range(1,Days_in_Year+1) :
            if Day > Summer_Solstice and Day < Winter_Solstice :
                aaa = True
            else:
                aaa = False
            if Day < Summer_Solstice or  Day > Winter_Solstice:
                bbb = True
            else:
                bbb = False
            # This skips out of the loop, if just half the analemma is requested
            if (Which_Analemma == 1 and aaa) or (Which_Analemma == 2 and bbb): 
                 continue
            xx = Get_Date_from_Day_in_Year(Day)
            Day_of_Month = xx[0]
            Month        = xx[1]
            My_Date_Text = xx[2]
            # Find the Shadow Point
            q = Shadow(Year,Month,Day_of_Month,int(Hour),Minute_in_Hour,Longitude,Time_Zone,File)
 
def Declination_Lines(File):
    # ----------------------------------------------------------
    # Draw the Declination Lines
    # First: Loop over the Days in a Year day, looking for the days on which
    # a declination line is requested  -
    # Second: Loop over Hours during the day
    # It calls routine 'Shadow' (& various output formatting rountines)
    # ----------------------------------------------------------
    
    # Don't try Declination Lines if only a Single Analemma
    if not (Want_Declination_Lines or Hour_Start != Hour_End) :
        return
    
    Print_Declination_Line_Header(File)
    for Day in range(1,Days_in_Year+1):
        xx = Get_Date_from_Day_in_Year(Day)
        Day_in_Month = xx[0]
        Month        = xx[1]
        Date_Text    = xx[2]
        # Only Calculate the Declination Lines on Solstices, Equinoxs, Special Days & selected days of month
        if (Day in Solstices) or (Day in Equinoxs) or (Day in Special_Days) or (Day_in_Month in Declination_Days) :
            # This skips out of the loop, if just half the analemma is requested
            Winter_to_Summer = Day < Summer_Solstice or  Day > Winter_Solstice
            Summer_to_Winter = Day > Summer_Solstice and Day < Winter_Solstice
            if (Which_Analemma == 1 and Summer_to_Winter) or (Which_Analemma == 2 and Winter_to_Summer): 
                continue
    
            Last_Date_Text     = ""
            Minute_Start       = Hour_Start * 60
            Minute_End         = Hour_End   * 60
            for Minute in range (Minute_Start,Minute_End,Declination_Increment):
                Hour           = int(Minute / 60)
                Minute_in_Hour = Minute % 60
                if Date_Text  != Last_Date_Text: 
                    Print_Declination_Lines_Sub_Header(Date_Text,File)
                Last_Date_Text = Date_Text
                # Find the Shadow Point
                q = Shadow(Year,Month,Day_in_Month,Hour,Minute_in_Hour,Longitude,Time_Zone,File)

def Shadow(The_Year,The_Month,The_Day,The_Hour,The_Minute,The_Longitude,The_Time_Zone,File):
    # ---------------------------------------------------------------
    # This is the Gnonomic Heart of the program
    # from Robert Sagot and Denis Savoie of Commission des Cadrans Solaires
    # Quoted in Meeus, Astronomical Algorithms - Chapter 58
    # It calls routine 'EoT_Decl' 
    # ---------------------------------------------------------------
    My_Decimal_Hour    = The_Hour + The_Minute/60.
    EoT_mins,Decl_deg  = EoT_Decl(The_Year,The_Month,The_Day,The_Hour,The_Longitude,The_Time_Zone,0)
    # Noon EoT & Decl used to estimate time of sunrise/set
    EoT_mins_Noon,Decl_deg_Noon = EoT_Decl(The_Year,The_Month,The_Day,12,      The_Longitude,The_Time_Zone,0)        
    # Traditional Sundial requested
    if Mean_or_Solar  == False : 
        EoT_mins       = 0
        EoT_mins_Noon  = 0

    Decl_radians       = radians(Decl_deg)
    Decl_radians_noon  = radians(Decl_deg_Noon)
    # ----------------------------------------------------------
    # Find Times of Sun Rise/Set
    # ----------------------------------------------------------
    HA_Sunrise_degrees = degrees(-acos(-tan(L) * tan(Decl_radians_noon)))
    Sunrise_hour       = 12. + HA_Sunrise_degrees/15. - EoT_mins_Noon/60.
    Sunset_hour        = 12. - HA_Sunrise_degrees/15. - EoT_mins_Noon/60.
    # ----------------------------------------------------------
    # Only Continue between Sun Rise and Sun Set
    # ----------------------------------------------------------
    if My_Decimal_Hour >= Sunrise_hour and My_Decimal_Hour <= Sunset_hour:
        H  = radians(((My_Decimal_Hour - EoT_mins/60. - 12.) * 15.))

        Q1 = sin(D) * sin(Z) * sin(H)
        Q2 = (cos(L) * cos(Z) + sin(L) * sin(Z) * cos(D)) * cos(H)
        Q3 = P * tan(Decl_radians)
        Q  = Q1 + Q2 + Q3
        # ----------------------------------------------------------
        # Only Continue if Sun is in front of the surface of the dial plate
        # Reference Meeus Astronomicla Algorithms Chapter 58
        # ----------------------------------------------------------
        if Q  > 0 :
            Nx1 = cos(D) * sin(H)
            Nx2 = sin(D) * (sin(L) * cos(H) - cos(L) * tan(Decl_radians))
            Nx = Nx1 - Nx2

            Ny1 = cos(Z)  * sin(D) * sin(H)
            Ny2 = (cos(L) * sin(Z) - sin(L) * cos(Z) * cos(Decl_radians)) * cos(H)
            Ny3 = (sin(L) * sin(Z) + cos(L) * cos(Z) * cos(D)) * tan(Decl_radians)
            Ny = Ny1 - Ny2 - Ny3
            # ----------------------------------------------------------
            # Find Coordinates of Shadow from nodus foot
            # Reference Meeus Astronomicla Algorithms Chapter 58
            # ----------------------------------------------------------
            x = (Nodus_Height * Nx / Q)
            y = (Nodus_Height * Ny / Q)
            # ----------------------------------------------------------
            # Find Coordinates of Shadow from plate centre
            # ----------------------------------------------------------
            xx = x + Nodus_x
            yy = y + Nodus_y
            On_Plate = " " if ((xx >= -WIDTH/2 and xx <= WIDTH/2) and (yy >= -HEIGHT/2 and yy <= HEIGHT/2)) else "Off Plate"
            
            # Write the output to file
            File.write(str(The_Year) +"\t" + str(The_Month) + "\t" + str(The_Day) + "\t" + str(The_Hour) + "\t" + str(The_Minute) + "\t" + str(round(xx,3)) +"\t"+ str(round(yy,3))+"\t"+ On_Plate +"\r")
            return
        else:
            File.write(str(The_Year) +"\t" + str(The_Month) + "\t" + str(The_Day) + "\t" + str(The_Hour) + "\t" + str(The_Minute) + "\t\t\t" + "Behind"+"\r")
            return 
    else:
        File.write(str(My_Year) +"\t" + str(The_Month) + "\t" + str(The_Day) + "\t" + str(The_Hour) + "\t" + str(The_Minute) + "\t\t\t" + "Night"+"\r")
        return

def EoT_Decl(Year,Month,Day,Hour,Longitude,Zone,DST):
    # ---------------------------------------------------------------
    # Routine to Calculate... 
    #      Longitude Corrected Equation of Time & 
    #      Solar Declination
    # This follows the routine to be found in Chapter 3, Comp[onents]
    # ---------------------------------------------------------------
    UTC_hrs = Hour - Zone - DST
    if UTC_hrs <  0 : Day-=1
    if UTC_hrs > 24 : Day+=1
    UTC_hrs = UTC_hrs % 24
    if (Month <= 2) :
        Year          -= 1
        Month         += 12
    A                  = floor(Year/100)
    B                  = 2 - A + floor(A/4)
    JD = int(365.25*(Year + 4716)) + int(30.6001*(Month+1)) + Day + B - 1524.5

    T                   = (JD - 2451545.)/36525
    D0                  = JD - 2451545.
    GMST_hrs            = (6.697374834 + 0.0657098242761  * D0 + 1.00273790935 * UTC_hrs + 0.000026 * T**2) % 24
    Mean_Longitude_hrs  = GMST_hrs + 12. - UTC_hrs
    Mean_Longitude_deg  = Mean_Longitude_hrs * 15

    Perihelion_deg      = 282.938     + 1.7     * T
    Eccentricity        = 0.016708617 - 0.00004 * T 
    Obliquity_deg       = 23.43929111 - 0.013   * T
    Obliquity_rad       = radians(Obliquity_deg)

    Mean_Anomaly_deg    = Mean_Longitude_deg - Perihelion_deg
    Mean_Anomaly_rad    = radians(Mean_Anomaly_deg)
    E0 = Mean_Anomaly_rad
    E1 = E0 + (Mean_Anomaly_rad + Eccentricity*sin(E0)- E0)/(1 - Eccentricity*cos(E0))
    E2 = E1 + (Mean_Anomaly_rad + Eccentricity*sin(E1)- E1)/(1 - Eccentricity*cos(E1))
    Eccentric_Anomaly   = E2
    True_Anomaly_rad    = atan2(sqrt(1 - Eccentricity**2) * sin(Eccentric_Anomaly), (cos(Eccentric_Anomaly)- Eccentricity))
    True_Anomaly_deg    = degrees(True_Anomaly_rad)

    True_Long_deg       = True_Anomaly_deg + Perihelion_deg
    True_Long_rad       = radians(True_Long_deg)

    Right_Ascension_rad = atan2(cos(Obliquity_rad) * sin(True_Long_rad),cos(True_Long_rad)) % (2*pi)
    Right_Ascension_deg = (degrees(Right_Ascension_rad)) % 360.
    Right_Ascension_hrs = Right_Ascension_deg / 15.
    Declination_rad     = asin(sin(Obliquity_rad) * sin(True_Long_rad))
    Declination_deg     = degrees(Declination_rad)

    EoT_deg             = Right_Ascension_deg - Mean_Longitude_deg
    if EoT_deg >  180.: EoT_deg = EoT_deg-360.
    if EoT_deg < -180.: EoT_deg = EoT_deg+360.
    EoT_min             = 4 * EoT_deg
    Long_Corr           = 4 * (Zone * 15 - Longitude)
    EoT_Corr_min        = EoT_min + Long_Corr
    return EoT_Corr_min,Declination_deg

def Get_Date_from_Day_in_Year(Day):
    # ---------------------------------------------------------------
    # Utility to get the civil date from Day Number 
    # Input 'Day' is day in year starting with 1 on 1st Jan
    # Output is... 
    #           Day in Month e.g 6th, 13th etc
    #           Month Index e.g 2 for Frbruary
    #           Text Date e.g 27-Apr
    # ---------------------------------------------------------------
    First_of_Month       = [0,1,32,60,91,121,152,182,213,244,274,305,335]
    if Year % 4 == 0 :   # Leap Year
        First_of_Month   = [0,1,32,61,92,122,153,183,214,245,275,306,336]
    Month_Names          = [" ","Jan","Feb","Mar","Apr","May","Jun",
                                "Jul","Aug","Sep","Oct","Nov","Dec"]
    Month_Index          = 0
    Last_Month_Index     = 0
    for Day_in_Year in range(1,366):
        if (Day_in_Year in First_of_Month):
            Month_Index += 1
            Last_Month_Index = Day_in_Year 
        if Day_in_Year == Day:
            Day_in_Month = Day_in_Year - Last_Month_Index + 1
            return Day_in_Month, Month_Index, str(Day_in_Month) + "-" + Month_Names[Month_Index]

# =================================================================================================================================
# Everything that follows is just for formatting the Output file
# =================================================================================================================================
def Print_Super_Header(File) :
    File.write ("Zenithal_Distance    = " + str(Zenithal_Dist)        + " degrees"+"\r")
    File.write ("Gnomonic_Declination = " + str(Gnomonic_Decl)        + " degrees"+"\r")
    File.write ("Dial_Plate_Width     = " + str(Dial_Plate_Width )    +"\r")
    File.write ("Dial_Plate_Height    = " + str(Dial_Plate_Height)    +"\r")
    File.write ("Nodus_Height         = " + str(Nodus_Height     )    +"\r")
    File.write ("Nodus_x              = " + str(round(Nodus_x,2))     + " from plate centre (+ve to right)"+"\r")
    File.write ("Nodus_y              = " + str(round(Nodus_y,2))     + " from plate centre (+ve up)"      +"\r")
    File.write ("Latitude             = " + str(Latitude)             + " degrees +ve N"                       +"\r")
    File.write ("Longitude            = " + str(Longitude)            + " degrees +ve E of Greenwich"          +"\r")
    File.write ("Time Zone            = " + str(Time_Zone)            + " hours +ve E of Greenwich"            +"\r")
    File.write ("Polar Style x,y      = " + str(round(X0,2)) + "," + str(round(Y0,2))                          +"\r")                        
        
    if Which_Analemma == 0:
        File.write ("Results for Full Analemma\r")
    elif Which_Analemma == 1:
        File.write ("Results for Daylight Increasing Days\r")
    else:
        File.write ("Results for Daylight Decreasing Days\r")
    File.write ("\r")
    File.write ("Warnings may be...\r")
    File.write ("   'Off Plate' = nodus shadow is not on the dial plate\r")
    File.write ("   'Behind'    = calculated nodus shadow behing the dial plate\r")
    File.write ("   'Below'     = night time - sun below horizon\r")
    File.write ("\r")

def Print_Analemma_Header(The_Hour,File):
    File.write ("+++++++++++++++++++++++++++++++++++++++++++++++\r")
    File.write ("A N A L E M M A   L I N E S\r")
    File.write ("+++++++++++++++++++++++++++++++++++++++++++++++\r")
    File.write ("Year"+"\t"+"Month"+"\t"+"Day"+"\t"+"Hour"+"\t"+"Minute"+"\t"+"X-Coords" +"\t"+"Y-Coords" +"\t" + "Warnings\r")

def Print_Analemma_Sub_Header(Time_Text,File):
    File.write ("===============================================\r")
    File.write ("Analemma for " + Time_Text +"\r")
    File.write ("===============================================\r")

def Print_Declination_Line_Header(File):
    if not(Want_Declination_Lines or Hour_Start != Hour_End): 
        File.write ("\r")
        File.write ("===============================================\r")
        File.write ("D E C L I N A T I O N   L I N E S"+"\r")
        File.write ("===============================================\r")
        File.write ("Year"+"\t"+"Month"+"\t"+"Day"+"\t"+"Hour"+"\t"+"Minute"+"\t"+"\t"+"X-Coords" +"\t"+"Y-Coords" +"\t" + "Warnings\r")

def Print_Declination_Lines_Sub_Header(My_Date_Text,File) :
    File.write ("===============================================\r")
    File.write ("Declination Line for " + My_Date_Text+"\r")
    File.write ("===============================================\r")


# =================================================================================================================================
# EXECUTE ALL THE PREVIOUS CODE
# =================================================================================================================================
Calculate()

print ("Done")